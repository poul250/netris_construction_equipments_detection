import * as React from 'react';
import { useState, useRef } from 'react';
import ReactPlayer from 'react-player';
import screenfull from 'screenfull';
import Container from '@mui/material/Container';
import './App.css';
import ControlIcons from './Components/ControlIcons';

import Table from '@mui/material/Table';
import TableBody from '@mui/material/TableBody';
import TableCell from '@mui/material/TableCell';
import TableContainer from '@mui/material/TableContainer';
import TableHead from '@mui/material/TableHead';
import TableRow from '@mui/material/TableRow';
import Paper from '@mui/material/Paper';
import { RecentActors } from '@mui/icons-material';
// import { DataGrid } from '@mui/x-data-grid';
// import TableMax from './Table';
// var columns = [
//     { field: 'id', headerName: 'ID', width: 70 },
//     { field: 'firstName', headerName: 'First name', width: 130 },
//     { field: 'lastName', headerName: 'Last name', width: 130 },
//     {
//         field: 'age',
//         headerName: 'Age',
//         type: 'number',
//         width: 90,
//     },
//     {
//         field: 'fullName',
//         headerName: 'Full name',
//         description: 'This column has a value getter and is not sortable.',
//         sortable: false,
//         width: 160,
//         valueGetter: (params) =>
//             `${params.row.firstName || ''} ${params.row.lastName || ''}`,
//     },
// ];

// var rows = [
//     { id: 1, lastName: 'Snow', firstName: 'Jon', age: 35 },
//     { id: 2, lastName: 'Lannister', firstName: 'Cersei', age: 42 },
//     { id: 3, lastName: 'Lannister', firstName: 'Jaime', age: 45 },
//     { id: 4, lastName: 'Stark', firstName: 'Arya', age: 16 },
//     { id: 5, lastName: 'Targaryen', firstName: 'Daenerys', age: null },
//     { id: 6, lastName: 'Melisandre', firstName: null, age: 150 },
//     { id: 7, lastName: 'Clifford', firstName: 'Ferrara', age: 44 },
//     { id: 8, lastName: 'Frances', firstName: 'Rossini', age: 36 },
//     { id: 9, lastName: 'Roxie', firstName: 'Harvey', age: 65 },
// ];

class TableMax extends React.Component {
    state = {
        rows: [
            createData('Frozen yoghurt', 159, 6.0, 24, 4.0),
            createData('Ice cream sandwich', 237, 9.0, 37, 4.3),
            createData('Eclair', 262, 16.0, 24, 6.0),
            createData('Cupcake', 305, 3.7, 67, 4.3),
            createData('Gingerbread', 356, 16.0, 49, 3.9),
        ]
    }
    handleUpdateRows(e) {
        this.setState({
            rows: e.target.value
        })
    }
    render() {
        return (
            <TableContainer component={Paper}>
                <Table sx={{ minWidth: 650 }} aria-label="simple table">
                    <TableHead>
                        <TableRow>
                            <TableCell>Dessert (100g serving)</TableCell>
                            <TableCell align="right">Calories</TableCell>
                            <TableCell align="right">Fat&nbsp;(g)</TableCell>
                            <TableCell align="right">Carbs&nbsp;(g)</TableCell>
                            <TableCell align="right">Protein&nbsp;(g)</TableCell>
                        </TableRow>
                    </TableHead>
                    <TableBody>
                        {this.state.rows.map((row) => (
                            <TableRow
                                key={row.name}
                                sx={{ '&:last-child td, &:last-child th': { border: 0 } }}
                            >
                                <TableCell component="th" scope="row">
                                    {row.name}
                                </TableCell>
                                <TableCell align="right">{row.calories}</TableCell>
                                <TableCell align="right">{row.fat}</TableCell>
                                <TableCell align="right">{row.carbs}</TableCell>
                                <TableCell align="right">{row.protein}</TableCell>
                            </TableRow>
                        ))}
                    </TableBody>
                </Table>
            </TableContainer>
        );
    }
}

class TableBig extends React.Component {
    state = {
        "result_json": "https://raw.githubusercontent.com/poul250/netris_construction_equipments_detection/master/frontend2/package.json",
        "objects": {
            "tractor1": {
                "url": "http://commondatastorage.googleapis.com/gtv-videos-bucket/sample/TearsOfSteel.mp4",
                "type": "tractor",
                "timeline": [
                    {
                        "start": 12,
                        "end": 20,
                        "video_timestamp": 0,
                        "status": "working"
                    },
                    {
                        "start": 20,
                        "end": 100,
                        "video_timestamp": 8,
                        "status": "chilling"
                    }
                ]
            },
            "tractor2": {
                "url": "http://commondatastorage.googleapis.com/gtv-videos-bucket/sample/TearsOfSteel.mp4",
                "type": "tractor",
                "timeline": [
                    {
                        "start": 5,
                        "end": 40,
                        "video_timestamp": 0,
                        "status": "working"
                    },
                    {
                        "start": 40,
                        "end": 100,
                        "video_timestamp": 35,
                        "status": "chilling"
                    },
                    {
                        "start": 100,
                        "end": 150,
                        "video_timestamp": 95,
                        "status": "working"
                    }
                ]
            }
        },
        "current": "tractor1"
    }

    handleUpdateBigRows(e) {
        this.setState({
            current: e.target.value
        })
    }

    render() {
        return (
            <>
                <header className='header__section'>
                    <p className='header__text'>Build a Video Player - Tutorial</p>
                </header>
                <Container maxWidth="md">
                    <div className='playerDiv' ref={playerDivRef}>
                        <ReactPlayer width={'100%'} height='100%'
                            ref={playerRef}
                            url="http://commondatastorage.googleapis.com/gtv-videos-bucket/sample/TearsOfSteel.mp4"
                            playing={playing}
                            volume={volume}
                            playbackRate={playerbackRate}
                            onProgress={handlePlayerProgress}
                            muted={muted} />

                        <ControlIcons
                            key={volume.toString()}
                            playandpause={handlePlayAndPause}
                            playing={playing}
                            rewind={handleRewind}
                            fastForward={handleFastForward}
                            muting={handleMuting}
                            muted={muted}
                            volumeChange={handleVolumeChange}
                            volumeSeek={handleVolumeSeek}
                            volume={volume}
                            playerbackRate={playerbackRate}
                            playRate={handlePlayerRate}
                            fullScreenMode={handleFullScreenMode}
                            played={played}
                            onSeek={handlePlayerSeek}
                            onSeekMouseUp={handlePlayerMouseSeekUp}
                            onSeekMouseDown={handlePlayerMouseSeekDown}
                            playedTime={playedTime}
                            fullMovieTime={fullMovieTime}
                            seeking={seeking}
                        />
                    </div>
                    <TableMax />
                    <div><button onClick={update_time}></button></div>
                </Container>
            </>
        )
    }
}



class VideoHack extends React.Component {
    // state = {
    //     url: "http://commondatastorage.googleapis.com/gtv-videos-bucket/sample/TearsOfSteel.mp4",
    // }
    
    render() {
        const [playerstate, setPlayerState] = useState({
            playing: true,
            muted: true,
            volume: 0.5,
            playerbackRate: 1.0,
            played: 0,
            seeking: false,
        })
    
        const update_time = () => {
            playerRef.current.seekTo(playerRef.current.getCurrentTime() + 60);
        }
    
    
        //Destructure State in other to get the values in it
        const { playing, muted, volume, playerbackRate, played, seeking } = playerstate;
        const playerRef = useRef(null);
        const playerDivRef = useRef(null);
    
        //This function handles play and pause onchange button
        const handlePlayAndPause = () => {
            setPlayerState({ ...playerstate, playing: !playerstate.playing })
        }
    
        const handleMuting = () => {
            setPlayerState({ ...playerstate, muted: !playerstate.muted })
        }
    
        const handleRewind = () => {
            playerRef.current.seekTo(playerRef.current.getCurrentTime() - 10)
        }
    
        const handleFastForward = () => {
            playerRef.current.seekTo(playerRef.current.getCurrentTime() + 30)
        }
    
        const handleVolumeChange = (e, newValue) => {
            setPlayerState({ ...playerstate, volume: parseFloat(newValue / 100), muted: newValue === 0 ? true : false, });
        }
    
        const handleVolumeSeek = (e, newValue) => {
            setPlayerState({ ...playerstate, volume: parseFloat(newValue / 100), muted: newValue === 0 ? true : false, });
        }
    
        const handlePlayerRate = (rate) => {
            setPlayerState({ ...playerstate, playerbackRate: rate });
        }
    
        const handleFullScreenMode = () => {
            screenfull.toggle(playerDivRef.current)
        }
    
        const handlePlayerProgress = (state) => {
            console.log('onProgress', state);
            if (!playerstate.seeking) {
                setPlayerState({ ...playerstate, ...state });
            }
            console.log('afterProgress', state);
        }
    
        const handlePlayerSeek = (e, newValue) => {
            setPlayerState({ ...playerstate, played: parseFloat(newValue / 100) });
            playerRef.current.seekTo(parseFloat(newValue / 100));
            // console.log(played)
        }
    
        const handlePlayerMouseSeekDown = (e) => {
            setPlayerState({ ...playerstate, seeking: true });
        }
    
        const handlePlayerMouseSeekUp = (e, newValue) => {
            setPlayerState({ ...playerstate, seeking: false });
            playerRef.current.seekTo(newValue / 100);
        }
    
        var currentPlayerTime = playerRef.current ? playerRef.current.getCurrentTime() : '00:00';
        var movieDuration = playerRef.current ? playerRef.current.getDuration() : '00:00';
        var playedTime = format(currentPlayerTime);
        var fullMovieTime = format(movieDuration);
        return (
            <>
                <header className='header__section'>
                    <p className='header__text'>Build a Video Player - Tutorial</p>
                </header>
                <Container maxWidth="md">
                    <div className='playerDiv' ref={playerDivRef}>
                        <ReactPlayer width={'100%'} height='100%'
                            ref={playerRef}
                            url={this.props.url}
                            playing={playing}
                            volume={volume}
                            playbackRate={playerbackRate}
                            onProgress={handlePlayerProgress}
                            muted={muted} />

                        <ControlIcons
                            key={volume.toString()}
                            playandpause={handlePlayAndPause}
                            playing={playing}
                            rewind={handleRewind}
                            fastForward={handleFastForward}
                            muting={handleMuting}
                            muted={muted}
                            volumeChange={handleVolumeChange}
                            volumeSeek={handleVolumeSeek}
                            volume={volume}
                            playerbackRate={playerbackRate}
                            playRate={handlePlayerRate}
                            fullScreenMode={handleFullScreenMode}
                            played={played}
                            onSeek={handlePlayerSeek}
                            onSeekMouseUp={handlePlayerMouseSeekUp}
                            onSeekMouseDown={handlePlayerMouseSeekDown}
                            playedTime={playedTime}
                            fullMovieTime={fullMovieTime}
                            seeking={seeking}
                        />
                    </div>
                    <TableMax />
                    <div><button onClick={update_time}></button></div>
                </Container>
            </>
        )
    }
}

const format = (seconds) => {
    if (isNaN(seconds)) {
        return '00:00'
    }

    const date = new Date(seconds * 1000);
    const hh = date.getUTCHours();
    const mm = date.getUTCMinutes();
    const ss = date.getUTCSeconds().toString().padStart(2, "0");

    if (hh) {
        return `${hh}:${mm.toString().padStart(2, "0")}:${ss}`
    } else {
        return `${mm}:${ss}`
    }
};

function App() {

    let objects = []

    for (var [obj_id, value] of Object.entries(d["objects"])) {
        objects.push(obj_id)
        let types = value["type"];
        let urls = value["url"];
        let tables = [];
        tables.push(value["timeline"]);

        console.log(types);
        console.log(urls);
        console.log(tables);
    }

    return (
        <VideoHack url="http://commondatastorage.googleapis.com/gtv-videos-bucket/sample/TearsOfSteel.mp4"/>
    )
}

export default App;
